---
description: 
globs: 
alwaysApply: true
---
To ensure your documentation remains consistent, up-to-date, and developer-friendlyâ€”especially in a modular Next.js project using the App Router, Zustand, Mongoose, and MongoDBâ€”it's essential to establish clear guidelines and integrate automated processes. Here's a comprehensive approach tailored to your stack and development practices:îˆ†

---

## ðŸ“š Documentation Guidelines

### 1. **Code-Level Documentation (JSDoc)**

- **Purpose**:îˆƒProvide inline documentation for functions, components, and modules to enhance readability and maintainabilityîˆ„îˆ†

- **Standards**:
  -îˆƒUse [JSDoc](https://jsdoc.app/) comments for all exported functions, classes, and componentsîˆ„
  -îˆƒDocument parameters, return types, and provide concise descriptionsîˆ„îˆ†

- **Example**:
  ```typescript
  /**
   * Fetches user data based on the provided ID.
   * @param {string} userId - The unique identifier for the user.
   * @returns {Promise<User>} The user data.
   */
  const getUserData = async (userId: string): Promise<User> => {
    // implementation
  };
  ```

### 2. **Component and Module Documentation**

- **Purpose**:îˆƒEnsure each component and module is self-explanatory and easy to integrateîˆ„îˆ†

- **Standards**:
  -îˆƒInclude a brief description at the top of each file explaining its purposeîˆ„
  -îˆƒFor React components, document props using TypeScript interfaces and provide default values where applicableîˆ„îˆ†

- **Example**:
  ```typescript
  /**
   * Button component for user interactions.
   * @param {ButtonProps} props - The properties for the button.
   * @returns {JSX.Element} The rendered button component.
   */
  const Button: React.FC<ButtonProps> = ({ label, onClick }) => {
    // implementation
  };
  ```

### 3. **Zustand Store Slices Documentation**

- **Purpose**:îˆƒClarify the structure and purpose of each store slice for state managementîˆ„îˆ†

- **Standards**:
  -îˆƒDocument the state structure and actions within each sliceîˆ„
  -îˆƒProvide usage examples in the commentsîˆ„îˆ†

- **Example**:
  ```typescript
  /**
   * Auth slice for managing user authentication state.
   * State:
   * - user: The authenticated user's information.
   * - isAuthenticated: Boolean indicating authentication status.
   * Actions:
   * - login: Function to authenticate a user.
   * - logout: Function to clear authentication.
   */
  const createAuthSlice = (set) => ({
    user: null,
    isAuthenticated: false,
    login: async (credentials) => { /* implementation */ },
    logout: () => { /* implementation */ },
  });
  ```

### 4. **API Route Documentation**

- **Purpose**:îˆƒProvide clarity on API endpoints, expected inputs, and outputsîˆ„îˆ†

- **Standards**:
  -îˆƒAt the top of each API route file, include a comment block detailing the endpoint's purpose, method, expected request body, and response structureîˆ„îˆ†

- **Example**:
  ```typescript
  /**
   * POST /api/users
   * Creates a new user.
   * Request Body:
   * - name: string
   * - email: string
   * Response:
   * - 201: User created successfully.
   * - 400: Validation error.
   */
  export default async function handler(req, res) {
    // implementation
  }
  ```

### 5. **README and Feature Documentation**

- **Purpose**:îˆƒOffer an overview of the project, setup instructions, and feature-specific guidesîˆ„îˆ†

- **Standards**:
  -îˆƒMaintain a comprehensive `README.md` at the project root coveringîˆ„
    - Project description
    - Installation and setup
    - Usage examples
    - Contribution guidelines
  -îˆƒFor each major feature or module, create a separate markdown file in a `docs/` directory detailing its purpose, usage, and any relevant notesîˆ„îˆ†

---

## ðŸ”„ Automated Documentation Updates

To ensure documentation stays in sync with code changes:

### 1. **Pre-Commit Hooks**

- **Tool** îˆƒ[Husky](https://typicode.github.io/husky)îˆ„îˆ†

- **Purpose** îˆƒRun scripts before commits to enforce documentation update.îˆ„îˆ†

- **Implementation**:
   îˆƒSet up a pre-commit hook to run a script that checks for changes in code and prompts for corresponding documentation update.îˆ„îˆ†

### 2. **Continuous Integration (CI) Checks**

- **Tool** îˆƒ[GitHub Actions](https://docs.github.com/en/actions) or [GitLab CI/CD](https://docs.gitlab.com/ee/ci)îˆ„îˆ†

- **Purpose** îˆƒAutomate checks to ensure documentation is updated with code change.îˆ„îˆ†

- **Implementation**:
   îˆƒConfigure a CI pipeline tha:îˆ„
    - Runs on pull requests.
    - Checks for modifications in code files.
    - Verifies corresponding documentation files are updated.
    - Fails the build if discrepancies are found.

### 3. **Documentation Generation Tools**

- **Tool** îˆƒ[TypeDoc](https://typedoc.org)îˆ„îˆ†

- **Purpose** îˆƒGenerate HTML or markdown documentation from TypeScript cod.îˆ„îˆ†

- **Implementation**:
   îˆƒIntegrate TypeDoc into the build process to automatically generate up-to-date documentatio.îˆ„
   îˆƒHost the generated docs using platforms like [Read the Docs](https://readthedocs.org/) or GitHub Page.îˆ„îˆ†

---

## ðŸ§  Best Practices

- **Consistency*: îˆƒEnsure all team members follow the established documentation standars.îˆ„îˆ†

- **Reviews*: îˆƒInclude documentation checks in code review processs.îˆ„îˆ†

- **Training*: îˆƒProvide onboarding sessions or guides for new contributors on documentation practics.îˆ„îˆ†

- **Feedback Loop*: îˆƒEncourage feedback on documentation clarity and usefulness, and iterate accordingy.îˆ„îˆ†

By adhering to these guidelines and integrating automated processes, your documentation will remain a reliable and up-to-date resource, enhancing the overall quality